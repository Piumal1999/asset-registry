name: CI pipeline

on:
  push:
    branches:
      - 'main'
env:
  PROJECT_ID: lt-2021-group-01
  GKE_CLUSTER: cluster-1    # Add your cluster name here.
  GKE_LOCATION: us-central1-c   # Add your cluster zone here.
  STAGING_DEPLOYMENT_NAME: staging # Add your deployment name here.

jobs:
  pre-ci:
    name: Wait till the prevoius CI finishes.
    runs-on: ubuntu-20.04
    steps:
      - name: Turnstyle
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          abort-after-seconds: 600
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-20.04
    needs:
      - pre-ci
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install python dev dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements-dev.txt
      - name: Setup Chrome webdriver
        uses: nanasess/setup-chromedriver@master
      - name: Setup Chrome Display
        run: |
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional, disables headless mode
      - name: Install the MySQL client
        run: sudo apt-get install mysql-client
      - name: Create a .env file
        run: |
          cat << EOF > .env
          MYSQL_HOST=localhost
          MYSQL_USER=asset-app
          MYSQL_PASSWORD=password
          MYSQL_DATABASE=asset_db
          MYSQL_PORT=3306
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_DB=0
          SECRET_KEY=bff4eb94deb028b293786461
          EOF
      - name: Docker compose up
        run: docker-compose up -d
      - name: Wait for 15 seconds for the setup to start
        run: sleep 15
      - name: Add mysql tables and data
        run: |
          mysql -h localhost -P 3306 --protocol=tcp -u root --password=password < scripts/table.sql
      - name: Test with pytest
        run: |
          pytest tests --verbose --failed-first
          ls -la
        env:
          DISPLAY: :99
      - name: Kill the docker compose
        run: docker-compose kill

  scan:
    name: Scan for image vulnerabilties
    runs-on: ubuntu-20.04
    needs:
      - pre-ci
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up QEMU for Docker
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build the docker image
        run: docker build . -t ${{ secrets.DOCKER_REGISTRY }}/asset-app
      - name: Container image scan
        uses: Azure/container-scan@v0.1
        with:
          image-name: ${{ secrets.DOCKER_REGISTRY }}/asset-app
        continue-on-error: true
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push to Docker Reg. with latest tag
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/asset-app

  analyze:
    name: Code Quality Scanning
    runs-on: ubuntu-latest
    needs:
      - pre-ci
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  test-staging:
    name: Test in staging env.
    needs:
      - test
      - scan
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          repository: linux-training-group-1/asset-registry-config
      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        id: install
      - name: Kustomize Build
        uses: karancode/kustomize-github-action@master
        with:
          kustomize_version: '3.0.0'
          kustomize_build_dir: environments/staging
          kustomize_comment: true
          kustomize_output_file: final.yaml
          kustomize_build_options: "--load_restrictor none"
          enable_alpha_plugins: true
      #        env:
      #          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ env.GKE_PROJECT }}
      - name: Get the GKE credentials
        #        This fetches the kubeconfig and put the kubeconfig file path to .env
        uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}
          credentials: ${{ secrets.GKE_SA_KEY }}
      - name: Clear the staging namespace
        run: kubectl --kubeconfig ${{ env.KUBECONFIG }} delete all --ignore-not-found=true -n default --all  --grace-period=0 --force
      - name: Deploy to staging
        run: kubectl --kubeconfig ${{ env.KUBECONFIG }} apply -f final.yaml -n default
      - name: Wait till the k8s becomes ready
        run: sleep 60
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install the MySQL client
        run: sudo apt-get install mysql-client
      - name: Port forward mysql
        run: kubectl port-forward svc/mysql-service  3306:3306 &
      - name: Create tables and add data to mysql
        run: |
          wget https://raw.githubusercontent.com/linux-training-group-1/asset-registry/main/scripts/table.sql
          wget https://raw.githubusercontent.com/linux-training-group-1/asset-registry/main/scripts/inserts.sql
          mysql -h localhost -P 3306 --protocol=tcp -u root --password=password < table.sql
          mysql -h localhost -P 3306 --protocol=tcp -u root --password=password < inserts.sql
      - name: Run the load test
        run: |
          wget https://raw.githubusercontent.com/linux-training-group-1/asset-registry/main/load_test/test_main.py
          wget https://raw.githubusercontent.com/linux-training-group-1/asset-registry/main/load_test/requirements.txt
          pip install -r requirements.txt
          echo "STAGING_IP=$(kubectl get ingress | awk 'FNR == 2 {print $4}')" >> ${{ $GITHUB_ENV }}
          cat ${{ $GITHUB_ENV }}
          pytest test_main.py


  build-and-push:
    name: Push to Production
    needs:
      - test-staging
      - analyze
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Install python libraries that needed to execute scripts
        run: pip install requests packaging
      - name: Get new Docker image tag
        run: COMMIT_MSG="${{ github.event.head_commit.message }}" python3 utils/docker_tag.py asset-app ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASS }}
      - name: Print env var
        run: echo $DOCKER_IMAGE_TAG
      - name: Build and push
        if: env.SHOULD_PUSH == 1
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_TAG }}
      - name: Checkout the app config repo
        uses: actions/checkout@v2
        if: env.SHOULD_PUSH == 1
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0
          repository: linux-training-group-1/asset-registry-config
          path: './config'
      - name: Get the new tag to DOCKER_NEW_TAG
        if: env.SHOULD_PUSH == 1
        run: python3 utils/get_new_tag.py ${{ env.DOCKER_IMAGE_TAG }}
      - name: Set the tag in prod env
        uses: mikefarah/yq@master
        with:
          cmd: yq e -i '.images[0].newTag = "${{ env.DOCKER_NEW_TAG }}"' config/environments/production/kustomization.yaml
      - name: Commit & Push changes
        if: env.SHOULD_PUSH == 1
        uses: actions-js/push@master
        with:
          branch: main
          repository: linux-training-group-1/asset-registry-config
          directory: './config'
          github_token: ${{ secrets.PERSONAL_COMMIT_TOKEN }}
          message: Updating the docker image tag via CI triggered by ${{ github.actor }}

