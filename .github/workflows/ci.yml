name: CI pipeline

on:
  push:
    branches:
      - 'main'
jobs:
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install python dev dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements-dev.txt
      - name: Setup Chrome webdriver
        uses: nanasess/setup-chromedriver@master
      - name: Setup Chrome Display
        run: |
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional, disables headless mode
      - name: Install the MySQL client
        run: sudo apt-get install mysql-client
      - name: Docker compose up
        run: docker-compose up -d
      - name: Wait for 15 seconds for the setup to start
        run: sleep 15
      - name: Add mysql tables and data
        run: |
          mysql -h localhost -P 3306 --protocol=tcp -u root --password=password < scripts/table.sql
      - name: Test with pytest
        run: |
          pytest --verbose --failed-first
          ls -la
        env:
          DISPLAY: :99
      - name: Kill the docker compose
        run: docker-compose kill

  scan:
    name: Scan for image vulnerabilties
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build the docker image
        run: docker build . -t ${{ secrets.DOCKER_REGISTRY }}/asset-app
      - name: Container image scan
        uses: Azure/container-scan@v0.1
        with:
          image-name: ${{ secrets.DOCKER_REGISTRY }}/asset-app
        continue-on-error: true

  analyze:
    name: Code Quality Scanning
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
#      - name: Autobuild
#        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1


  build-and-push:
    name: Push to the docker reg. and to config repo
    needs:
      - test
      - scan
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Install python libraries that needed to execute scripts
        run: pip install requests packaging
      - name: Get new Docker image tag
        run: COMMIT_MSG="${{ github.event.head_commit.message }}" python3 utils/docker_tag.py asset-app ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASS }}
      - name: Print env var
        run: echo $DOCKER_IMAGE_TAG
      - name: Build and push
        if: env.SHOULD_PUSH == 1
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_TAG }}
      - name: Checkout the app config repo
        uses: actions/checkout@v2
        if: env.SHOULD_PUSH == 1
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0
          repository: linux-training-group-1/asset-registry-config
          path: './config'
      - name: Replace the older version tag
        if: env.SHOULD_PUSH == 1
        run: python3 utils/replace_tag.py config/k8s-artifacts/asset-app-deployment.yaml ${{ env.DOCKER_IMAGE_TAG }}
      - name: Commit & Push changes
        if: env.SHOULD_PUSH == 1
        uses: actions-js/push@master
        with:
          branch: main
          repository: linux-training-group-1/asset-registry-config
          directory: './config'
          github_token: ${{ secrets.PERSONAL_COMMIT_TOKEN }}
          message: Updating the docker image tag via CI; triggered by ${{ github.actor }}

# TODO: create a helm chart
# TODO: fix the k8s deployment
